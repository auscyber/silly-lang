use crate::parser::ast::{Expr, Type, Op, Ident, Function};
use std::str::FromStr;

grammar;


Ident: Ident = r"[a-zA-Z_][a-zA-Z0-9_]*" => Ident(<>.to_string());

pub Type: Type = {
    "num" => Type::Num,
    "str" => Type::String
};

Num: f64 = r"[0-9]+(\.[0-9]+)?" => f64::from_str(<>).unwrap();

Str: String = r#""[^"]*""# => <>.to_string();

pub Expr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::BinOp(<>)),
    Factor,
};

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::BinOp(<>)),
    Term,
};

ExprOp: Op = {
    "+" => Op::Add,
    "-" => Op::Sub
};

FactorOp: Op = {
    "*" => Op::Mul,
    "/" => Op::Div
};


Term: Box<Expr> = {
    "(" <Expr> ")",
    Num => Box::new(Expr::Number(<>)),
    Str => Box::new(Expr::String(<>)),
    Ident => Box::new(Expr::Var(<>)),
    Call
};


Comma<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Function: Function = {
    "fn" <id: Ident> "(" <args: Comma<FnArg>> ")" <body: Block> => Function {
        name: id,
        args: args,
        body: body
    }
}

FnArg : (Ident, Type) = {
    <Ident> ":" <Type>
} 


Block : Vec<Box<Expr>> = {
    "{" <mut v:(<Statement>)*> <e:Expr?> "}" => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};


pub File: Vec<Box<Expr>> = {
    <mut v:(<Statement>)*> => v
};

pub Statement: Box<Expr> = {
    <Expr> ";" ,
    <Function> => Box::new(Expr::Function(<>)),
    <Let> 
};


Call: Box<Expr> = {
    <Ident> "(" <Comma<Expr>> ")" => Box::new(Expr::Call(<>))
};

Let: Box<Expr> = {
    "let" <Ident> "=" <Expr> ";" => Box::new(Expr::Let(  <>)) 
};